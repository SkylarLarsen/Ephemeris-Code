import astropy
import astropy.timeseries
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math as m
from astropy.timeseries import LombScargle 

refCoor = 57371.3
mean = 0.00812197
slope = -0.0000123731
period = 365.256
aSin1 = 0.00403133
bCos1 = -0.000433795

t = (58154.51741503,58154.52006401,58154.52249801,58154.52450822,                                                                        #Feb 05 2018
     58155.55294107,58155.55474757,58155.5564104,58155.55807328,58155.55978149,58155.56144503,58155.56310799,                            #Feb 06 2018
     58198.45563286,58198.45760036,58198.45926344,58198.4609264,58198.46258936,58198.46432915,58198.46599211,58198.46765511,             #Mar 21 2018
     58198.46931807,58198.47098115,                                                                                                      #"                                                           
     58245.44644411,58245.44823844,                                                                                                      #May 07 2018
     58247.46065024,58247.46245057,58247.46411353,58247.46577649,58247.46743949,58247.46910244,58247.4708279,58247.47249086,             #May 09 2018
     58247.47415394,58247.47581711,                                                                                                      #"                                                                  
     58248.35267674,58248.35464374,58248.35630669,58248.35796969,58248.35963332,                                                         #May 10 2018
     58250.36650974,58250.36840719,58250.37007003,58250.37173299,58250.37339594,58250.37665682,58250.37832003,58250.37998299,            #May 12 2018
     58272.27288403,58272.27473832,58272.2764014,58272.27806436,58272.27972744,58272.2813904,58272.2831809,58272.28484386,               #Jun 03 2018
     58274.25946214,58274.26162985,58274.26259839,58274.26356689,58274.26453543,58274.26550393,58274.26647247,58274.26744097,            #Jun 05 2018
     58274.26862697,58274.26959547,58274.27056401,                                                                                       #"
     58277.28057292,58277.28239504,58277.28371075,58277.2850265,58277.28634225,58277.287658,58277.28897371,58277.29028958,58277.29160533,#Jun 08 2018
     58277.29292108,                                                                                                                     #"                                                                    
     58278.25700996,58278.25857837,58278.25989408,58278.26120983,58278.26252558,58278.26384133,58278.26515696,58278.26647267,            #Jun 09 2018
     58278.26778854,58278.26910417,58278.27068633,58278.27200208,58278.27331783,58278.27463358,58278.27594921,                           #"                                      
     58279.25367338,58279.25568808,58279.25700383,58279.25831954,58279.25963529,58279.26095104,58279.26226679,58279.26358254,            #Jun 10 2018
     58279.26508496,58279.26640079,                                                                                                      #"                                                                       
     58309.30658821,58309.30897317,                                                                                                      #Jul 10 2018
     58344.15521343,58344.18049167,58344.1836125,58344.28287512,58344.2844455,58344.286039,58344.28735462,58344.28873021,                #Aug 14 2018
     58344.29004583,58344.29145383,                                                                                                      #"                                                                       
     58346.12774342,58346.12985394,58346.13161111,58346.13330265,58346.13505244,58346.13675394,58346.13846157,58346.14017199,            #Aug 16 2018
     58346.14194894,58346.14395786,58346.14567511,58346.14867015,58346.15039107,58346.15208194,                                          #"
     58362.11826668,58362.11946935,58362.12043772,58362.12140614,58362.12264435,58362.12361272,58362.12458114,58362.12654664,            #Sep 01 2018
     58362.12751506,58362.12848335,58362.12952314,58362.13049156,58362.13145997,58362.20557222,58362.20671735,58362.20768576,            #"
     58362.20865418,58362.20962247,58362.21059122,58362.21155997,58362.2125286,58362.21349722,58362.21446564,58362.21543439,             #"
     58362.21658601,58362.21755439,58362.21852268,58362.21949131,58362.22045972)              

#putting data through the ECM functional form
ECM_output= []
for i in t:
    c = i
    ECM_point = mean + aSin1 * m.cos((2 * m.pi * (c - refCoor))/period) + bCos1 * m.cos((4 * m.pi * (c - refCoor))/period) + aSin1 * m.sin((2 * m.pi * (c - refCoor))/period) + bCos1 * m.sin((4 * m.pi * (c - refCoor))/period) + slope * (c - refCoor)
    #print(ECM_point)
    ECM_output.append(ECM_point)
#print(ECM_output)
#plt.scatter(t, ECM_output)             #Should make a nice sine wave

y = (0.124081,0.108039,0.085637,0.119455,                                                                                                   #Feb 05 2018
     0.088475,0.121564,0.104660,0.166521,0.118686,0.089554,0.035966,                                                                        #Feb 06 2018
     0.075184,0.071947,0.076983,0.072306,0.071947,0.073745,0.068349,0.073026,0.067630,0.067630,                                             #Mar 21 2018
     -0.035621,-0.019789,                                                                                                                   #May 07 2018
     -0.036701,-0.039939,-0.026626,-0.039579,-0.044257,-0.039219,-0.041018,-0.057210,-0.048934,-0.052172,                                   #May 09 2018
     0.057929,0.050014,0.056130,0.050733,0.060088,                                                                                          #May 10 2018
     0.017271,0.027706,0.027706,-0.001439,0.010075,0.020869,0.011514,-0.000720,                                                             #May 12 2018
     0.081681,0.050376,0.062610,0.074844,0.077363,0.054694,0.061171,0.068727,                                                               #Jun 03 2018
     0.065489,0.051456,0.051456,0.052175,0.053975,0.052895,0.056134,0.053255,0.053255,0.043899,0.050016,                                    #Jun 05 2018
     0.044979,0.055054,0.032745,0.046058,0.040661,0.048937,0.041381,0.041381,0.037782,0.048217,                                             #Jun 08 2018
     0.061171,0.053615,0.061891,0.057933,0.062611,0.059012,0.049657,0.048217,0.054694,0.053615,0.051456,0.057213,0.052895,0.052895,0.039222,#Jun 09 2018
     0.035623,0.041021,0.050377,0.053255,0.032385,0.038502,0.034904,0.035264,0.031305,0.026987,                                             #Jun 10 2018
     -0.106510,-0.099673,                                                                                                                   #Jul 10 2018
     -0.071960,-0.043896,-0.087072,-0.135645,-0.157593,-0.132047,-0.149677,-0.091030,-0.145360,-0.000720,                                   #Aug 14 2018
     -0.033101,-0.011514,-0.003958,-0.000360,0.017990,-0.002519,-0.001079,0.016551,-0.000360,0.012233,0.001799,-0.015471,-0.020868,-0.016911,#Aug 16 2018
     -0.039575,-0.033459,-0.053247,-0.044252,-0.037417,-0.043173,-0.046411,-0.050728,-0.044972,-0.052887,-0.062241,-0.055765,-0.054326,
     -0.100377,-0.113689,-0.113689,-0.122324,-0.126281,-0.127001,-0.131678,-0.102536,-0.115128,-0.110091,-0.106853,-0.121964,-0.085986,
     -0.138873,-0.118006,-0.137794)

#Plotting raw data
plt.scatter(t,y)              

#Subtracting the ECM funcitonal form from the raw data
data = []
zip_object = zip(y, ECM_output)
for y_i, ECM_output_i in zip_object:
    data.append(y_i-(ECM_output_i))
#print(data)
#plt.scatter(t,data)   #Plotting Raw Data - ECM functional form graph

### Preparation of Data ############################################################################################
### Frequency
ls = LombScargle(t, data)
frequency, power = ls.autopower(nyquist_factor=500,minimum_frequency=0.2)

### Units
period_days = 1 / frequency
period_hours = period_days * 24

best_period = period_days[np.argmax(power)]
phase = (t / best_period) % 1
print("Best period: {0:.2f} hours".format(24 * best_period))
#print(phase)
#plt.scatter(phase, y)

### Lomb-Scargle Model ############################################################################################
fig, ax = plt.subplots(figsize=(10, 3))

phase_model = np.linspace(-0.5, 1.5, 100)
best_frequency = frequency[np.argmax(power)]
mag_model = ls.model(phase_model / best_frequency, best_frequency)

for offset in [-1, 0, 1]:
    ax.errorbar(phase + offset, y, fmt='.',
                color='gray', ecolor='lightgray', capsize=0);
ax.plot(phase_model, mag_model, '-k', lw=2)
ax.set(xlim=(0, 1),
       xlabel='phase',
       ylabel='difference')
ax.invert_yaxis()
