import astropy
import astropy.timeseries
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
import math as m
from astropy.timeseries import LombScargle 

refCoor = 57371.3
mean = 0.00812197
slope = -0.0000123731
period = 365.256
aSin1 = 0.00403133
bCos1 = -0.000433795

t = (58154.51741503,58154.52006401,58154.52249801,58154.52450822,                                                                        #Feb 05 2018
     58155.55294107,58155.55474757,58155.5564104,58155.55807328,58155.55978149,58155.56144503,58155.56310799,                            #Feb 06 2018
     58198.45563286,58198.45760036,58198.45926344,58198.4609264,58198.46258936,58198.46432915,58198.46599211,58198.46765511,             #Mar 21 2018
     58198.46931807,58198.47098115,                                                                                                      #"                                                           
     58245.44644411,58245.44823844,                                                                                                      #May 07 2018
     58247.46065024,58247.46245057,58247.46411353,58247.46577649,58247.46743949,58247.46910244,58247.4708279,58247.47249086,             #May 09 2018
     58247.47415394,58247.47581711,                                                                                                      #"                                                                  
     58248.35267674,58248.35464374,58248.35630669,58248.35796969,58248.35963332,                                                         #May 10 2018
     58250.36650974,58250.36840719,58250.37007003,58250.37173299,58250.37339594,58250.37665682,58250.37832003,58250.37998299,            #May 12 2018
     58272.27288403,58272.27473832,58272.2764014,58272.27806436,58272.27972744,58272.2813904,58272.2831809,58272.28484386,               #Jun 03 2018
     58274.25946214,58274.26162985,58274.26259839,58274.26356689,58274.26453543,58274.26550393,58274.26647247,58274.26744097,            #Jun 05 2018
     58274.26862697,58274.26959547,58274.27056401,                                                                                       #"
     58277.28057292,58277.28239504,58277.28371075,58277.2850265,58277.28634225,58277.287658,58277.28897371,58277.29028958,58277.29160533,#Jun 08 2018
     58277.29292108,                                                                                                                     #"                                                                    
     58278.25700996,58278.25857837,58278.25989408,58278.26120983,58278.26252558,58278.26384133,58278.26515696,58278.26647267,            #Jun 09 2018
     58278.26778854,58278.26910417,58278.27068633,58278.27200208,58278.27331783,58278.27463358,58278.27594921,                           #"                                      
     58279.25367338,58279.25568808,58279.25700383,58279.25831954,58279.25963529,58279.26095104,58279.26226679,58279.26358254,            #Jun 10 2018
     58279.26508496,58279.26640079,                                                                                                      #"                                                                       
     58309.30658821,58309.30897317,                                                                                                      #Jul 10 2018
     58344.15521343,58344.18049167,58344.1836125,58344.28287512,58344.2844455,58344.286039,58344.28735462,58344.28873021,                #Aug 14 2018
     58344.29004583,58344.29145383,                                                                                                      #"                                                                       
     58346.12774342,58346.12985394,58346.13161111,58346.13330265,58346.13505244,58346.13675394,58346.13846157,58346.14017199,            #Aug 16 2018
     58346.14194894,58346.14395786,58346.14567511,58346.14867015,58346.15039107,58346.15208194,                                          #"
     58362.11826668,58362.11946935,58362.12043772,58362.12140614,58362.12264435,58362.12361272,58362.12458114,58362.12654664,            #Sep 01 2018
     58362.12751506,58362.12848335,58362.12952314,58362.13049156,58362.13145997,58362.20557222,58362.20671735,58362.20768576,            #"
     58362.20865418,58362.20962247,58362.21059122,58362.21155997,58362.2125286,58362.21349722,58362.21446564,58362.21543439,             #"
     58362.21658601,58362.21755439,58362.21852268,58362.21949131,58362.22045972)              

ECM_output= []
for i in t:
    c = i
    ECM_point = mean + aSin1 * m.cos((2 * m.pi * (c - refCoor))/period) + bCos1 * m.cos((4 * m.pi * (c - refCoor))/period) + aSin1 * m.sin((2 * m.pi * (c - refCoor))/period) + bCos1 * m.sin((4 * m.pi * (c - refCoor))/period) + slope * (c - refCoor)
    #print(ECM_point)
    ECM_output.append(ECM_point)
#print(ECM_output)
#plt.scatter(t, ECM_output)

y = (0.098545205,0.079603428,0.042319292,0.187619524,                                                                                   #Feb 05 2018
     0.163043865,0.144821315,0.068334561,0.220828533,0.115928986,0.177430092,0.064258467,                                               #Feb 06 2018
     0.080100449,0.079021253,0.085856171,0.083338045,0.084776975,0.088374303,0.08513671,0.091611898,0.088014572,0.089453504,            #Mar 21 2018
     0.023507389,-0.051332461,                                                                                                          #May 07 2018
     0.032502769,-0.064645728,0.012233514,-0.087433648,-0.028904676,0.039339146,-0.052412215,-0.005397139,-0.083835558,-0.023867347,    #May 09 2018
     0.124254463,0.012713295,0.080957301,-0.012233548,0.059248751,                                                                      #May 10 2018
     0.020509308,0.077959345,-0.012353558,0.018470368,0.089953092,0.073641598,-0.025666616,0.02170868,                                  #May 12 2018
     0.10015249,0.100032547,0.006117098,0.061410869,0.107708907,0.128459064,0.020510271,0.07112626,                                     #Jun 03 2018
     0.097753886,0.09403564,0.031785006,0.119823476,0.059371993,-0.004317963,0.086599149,0.021469872,0.095115132,0.02314908,0.116944834,#Jun 05 2018
     0.023269104,0.064889616,0.10722979,0.035263488,0.094515743,0.0175118,0.074605068,-0.010675002,0.050376412,0.125461255,             #Jun 08 2018  
     0.114666422,0.005277534,0.078203459,0.13853527,0.057932931,0.118624573,0.023988791,0.087199257,0.158326025,0.071606543,            #Jun 09 2018
     0.116825415,0.036942739,0.09727455,0.011994396,0.062610746,                                                                        #"
     -0.029146409,-0.004797763,0.069207728,0.136376408,0.030225906,0.100633075,0.011754519,0.076404373,0.124501945,0.034903724,         #Jun 10 2018
     -0.167801024,-0.145611468,                                                                                                         #Jul 10 2018
     -0.047733626,-0.062245603,-0.034660847,-0.048932942,-0.110458921,-0.125570565,-0.17630251,-0.002638541,-0.090070194,0.018949521,   #Aug 14 2018
     0.043055914,0.01571121,-0.0173902721,0.097265587,0.074958065,0.01487168,-0.023266983,0.104701424,0.046773832,0.012952753,          #Aug 16 2018
     -0.037419065,0.026145372,-0.019189264,-0.054449535,                                                                                  #"
     -0.041374226,-0.039575346,-0.063320553,-0.057923915,-0.05576526,-0.065119433,-0.071955173,-0.083827777,-0.081669121,-0.093541723,-0.106493654,#Sep 01 2018
     -0.103975223,-0.106133878,-0.129399342,-0.147028351,-0.150626108,-0.162858483,-0.170413774,-0.174731079,-0.182646146,-0.00755529,-0.023745198,
     -0.021946319,-0.022306095,-0.041733984,-0.009354169,-0.065838956,-0.048569722,-0.071955144)

data = []
zip_object = zip(y, ECM_output)
for y_i, ECM_output_i in zip_object:
    data.append(y_i-(ECM_output_i)) #multiply each ECM_point by 10???
#print(data)
#plt.scatter(t,data)

### Preparation of Data ############################################################################################
### Frequency
ls = LombScargle(t, data)
frequency, power = ls.autopower(nyquist_factor=500,minimum_frequency=0.2)

### Units
period_days = 1 / frequency
period_hours = period_days * 24

best_period = period_days[np.argmax(power)]
phase = (t / best_period) % 1
print("Best period: {0:.2f} hours".format(24 * best_period))
#print(phase)
#plt.scatter(phase, y)

### Lomb-Scargle Model ############################################################################################
fig, ax = plt.subplots(figsize=(10, 3))

phase_model = np.linspace(-0.5, 1.5, 100)
best_frequency = frequency[np.argmax(power)]
mag_model = ls.model(phase_model / best_frequency, best_frequency)

for offset in [-1, 0, 1]:
    ax.errorbar(phase + offset, y, fmt='.',
                color='gray', ecolor='lightgray', capsize=0);
ax.plot(phase_model, mag_model, '-k', lw=2)
ax.set(xlim=(0, 1),
       xlabel='phase',
       ylabel='mag')
ax.invert_yaxis()
